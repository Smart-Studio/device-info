buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath "com.jakewharton.hugo:hugo-plugin:$rootProject.hugoVersion"
    }
}

apply plugin: 'com.android.application'
apply plugin: 'com.jakewharton.hugo'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'me.tatarka.retrolambda'

def versionMajor = 1
def versionMinor = 0
def versionPatch = 0


class Config {
    String gitSha
    Properties keystoreProps
}

ext {
    config = new Config()
    config.gitSha = getGitSha()
    config.keystoreProps = new Properties()

    def basePath = projectDir.absolutePath + "/config/"
    config.keystoreProps.load(new FileInputStream(rootProject.file((basePath + "keystore.properties"))))
}

android {
    compileSdkVersion rootProject.compileSdkVersion
    buildToolsVersion rootProject.buildToolsVersion

    defaultConfig {
        applicationId "com.smarstudio.deviceinfo"
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion
        versionCode versionMajor * 1000000 + versionMinor * 10000 + versionPatch * 100
        versionName "${versionMajor}.${versionMinor}.${versionPatch}"
    }

    signingConfigs {
        release {
            storeFile file(config.keystoreProps.release_store_file)
            storePassword config.keystoreProps.release_store_pass
            keyAlias config.keystoreProps.release_key_alias
            keyPassword config.keystoreProps.release_key_pass
        }

        debug {
            storeFile file('keystores/debug.keystore')
            storePassword 'deviceinfodebug'
            keyAlias 'Device info debug'
            keyPassword 'deviceinfodebug'
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            useProguard true
            shrinkResources true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {
            minifyEnabled true
            useProguard false
            signingConfig signingConfigs.debug
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    productFlavors {
        mock
        prod
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    // Remove mockRelease as it's not needed.
    android.variantFilter { variant ->
        if (variant.buildType.name.equals('release')
                && variant.getFlavors().get(0).name.equals('mock')) {
            variant.setIgnore(true);
        }
    }

    // Always show the result of every unit test, even if it passes.
    testOptions.unitTests.all {
        testLogging {
            events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile "com.android.support:appcompat-v7:$rootProject.supportLibraryVersion"
    compile "com.android.support:design:$rootProject.supportLibraryVersion"
    compile "com.google.guava:guava:$rootProject.guavaVersion"
    compile "com.google.android.gms:play-services-analytics:$rootProject.playServicesVersion"
    compile "com.google.android.gms:play-services-base:$rootProject.playServicesVersion"
    compile "com.google.android.gms:play-services-ads:$rootProject.playServicesVersion"
    compile "com.jakewharton:butterknife:$rootProject.butterknifeVersion"
    compile "com.jakewharton.timber:timber:$rootProject.timberVersion"
    debugCompile "com.squareup.leakcanary:leakcanary-android:$rootProject.leakCanaryVersion"
    releaseCompile "com.squareup.leakcanary:leakcanary-android-no-op:$rootProject.leakCanaryVersion"
    compile "com.google.dagger:dagger:$rootProject.dagger2Version"
    apt "com.google.dagger:dagger-compiler:$rootProject.dagger2Version"


    testCompile "com.squareup.leakcanary:leakcanary-android-no-op:$rootProject.leakCanaryVersion"
    testCompile "junit:junit:$rootProject.junitVersion"
}

def getGitSha() {
    return 'git rev-parse --short HEAD'.execute().text.trim()
}
