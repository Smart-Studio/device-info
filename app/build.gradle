buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
        maven { url 'https://www.testfairy.com/maven' }
        mavenCentral()
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.21.6'
        classpath 'com.testfairy.plugins.gradle:testfairy:1.12'
        classpath "com.jakewharton.hugo:hugo-plugin:1.2.1"
    }
}

plugins {
    id "com.nimbledroid.profiler" version "1.0.8"
}

repositories {
    maven { url 'https://maven.fabric.io/public' }
}

apply plugin: 'android-sdk-manager'
apply plugin: 'com.android.application'
apply plugin: 'spoon'
apply plugin: 'io.fabric'
apply plugin: 'testfairy'
apply plugin: 'com.jakewharton.hugo'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'me.tatarka.retrolambda'
apply from: 'jacoco.gradle'


def versionMajor = 1
def versionMinor = 1
def versionPatch = 0
def versionBuild = 0 // bump for dogfood builds, public betas, etc.


class Config {
    String gitSha
    Properties props
}

ext {
    config = new Config()
    config.gitSha = getGitSha()
    config.props = new Properties()
    config.props.load(new FileInputStream(project.file(("config/config.properties"))))

    Properties fabricProperties = new Properties()
    File fabricPropertiesFile = new File(project.projectDir, "fabric.properties")
    fabricPropertiesFile.createNewFile()
    fabricProperties.load(new FileInputStream(fabricPropertiesFile))
    fabricProperties.apiSecret = config.props.fabric_api_secret
    fabricProperties.store(new FileOutputStream(fabricPropertiesFile), null)
}

android {
    compileSdkVersion 23
    buildToolsVersion '23.0.3'
    //TODO To support shadow object in robolectric, remove when fixed https://github.com/robolectric/robolectric/issues/1862
    useLibrary 'org.apache.http.legacy'

    defaultConfig {
        applicationId "com.smarstudio.deviceinfo"
        minSdkVersion 15
        targetSdkVersion 23
        versionCode versionMajor * 1000000 + versionMinor * 10000 + versionPatch * 100 + versionBuild
        versionName "${versionMajor}.${versionMinor}.${versionPatch}"
        project.archivesBaseName = "device-info-${versionName}"

        manifestPlaceholders = [
                fabricApiKey: config.props.fabric_api_key
        ]

        buildConfigField "String", "REPOSITORY_URL", "\"${config.props.repository_url}\""
        buildConfigField "String", "ANALYTICS_TRACKING_ID", "\"${config.props.analytics_tracking_id}\""
        buildConfigField "String", "ANALYTICS_DEBUG_TRACKING_ID", "\"${config.props.analytics_debug_tracking_id}\""
        ext.betaDistributionGroupAliasesFilePath = config.props.fabric_testers_file

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        release {
            storeFile file(config.props.release_store_file)
            storePassword config.props.release_store_pass
            keyAlias config.props.release_key_alias
            keyPassword config.props.release_key_pass
        }

        debug {
            storeFile file('keystores/debug.keystore')
            storePassword 'deviceinfodebug'
            keyAlias 'Device info debug'
            keyPassword 'deviceinfodebug'
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            useProguard true
            shrinkResources true
            //TODO Disable for Google Play Store apk
            testCoverageEnabled true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {
            minifyEnabled true
            useProguard false
            testCoverageEnabled true
            applicationIdSuffix '.debug'
            versionNameSuffix " ${config.gitSha}"
            signingConfig signingConfigs.debug
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    productFlavors {
        mock {
            applicationIdSuffix '.mock'
        }
        prod
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    // Remove mockRelease as it's not needed.
    android.variantFilter { variant ->
        if (variant.buildType.name.equals('release')
                && variant.getFlavors().get(0).name.equals('mock')) {
            variant.setIgnore(true);
        }
    }

    // Always show the result of every unit test, even if it passes.
    testOptions.unitTests.all {
        testLogging {
            events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
        }
    }

    testfairyConfig {
        apiKey config.props.testfairy_api_key
        videoRate "1"
        videoQuality "medium"
        iconWatermark true
        maxDuration "10m"
    }
}

// config for NimbleDroid Gradle plugin
nimbledroid {
    apiKey config.props.nimbledroid_api_key
    variant "prodRelease"
}

spoon {
    adbTimeout = 60
}

ext {
    // App dependencies
    supportLibraryVersion = '23.4.0'
    playServicesVersion = '9.0.1'
    guavaVersion = '19.0'
    butterknifeVersion = '8.0.1'
    timberVersion = '4.1.1'
    stethoVersion = '1.3.1'
    leakCanaryVersion = '1.4-beta2'
    dagger2Version = '2.4'

    // Testing dependencies
    espressoVersion = '2.2.2'
    testingSupportVersion = '0.5'
    mockitoVersion = '2.0.2-beta'
    powerMockitoVersion = '1.6.5'
    robolectricVersion = '3.0'
    spoonVersion = '1.5.3'
    assertjVersion = '3.3.0'
    assertJAndroidVersion = '1.1.1'
    junitVersion = '4.12'
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile "com.android.support:support-annotations:$supportLibraryVersion"
    compile "com.android.support:appcompat-v7:$supportLibraryVersion"
    compile "com.android.support:percent:$supportLibraryVersion"
    compile "com.android.support:cardview-v7:$supportLibraryVersion"
    compile "com.android.support:design:$supportLibraryVersion"
    compile "com.google.guava:guava:$guavaVersion"
    compile "com.google.android.gms:play-services-analytics:$playServicesVersion"
    compile "com.google.android.gms:play-services-base:$playServicesVersion"
    compile "com.google.android.gms:play-services-ads:$playServicesVersion"
    compile "com.jakewharton:butterknife:$butterknifeVersion"
    apt "com.jakewharton:butterknife-compiler:$butterknifeVersion"
    compile "com.jakewharton.timber:timber:$timberVersion"
    debugCompile "com.facebook.stetho:stetho:$stethoVersion"
    debugCompile "com.squareup.leakcanary:leakcanary-android:$leakCanaryVersion"
    releaseCompile "com.squareup.leakcanary:leakcanary-android-no-op:$leakCanaryVersion"
    compile "com.google.dagger:dagger:$dagger2Version"
    apt "com.google.dagger:dagger-compiler:$dagger2Version"
    compile('com.crashlytics.sdk.android:crashlytics:2.5.5@aar') {
        transitive = true;
    }

    // Espresso UI Testing dependencies.
    androidTestCompile "com.android.support.test.espresso:espresso-core:$espressoVersion"
    androidTestCompile("com.android.support.test.espresso:espresso-contrib:$espressoVersion") {
        exclude module: 'support-annotations'
        exclude module: 'recyclerview-v7'
        exclude module: 'support-v4'
    }
    androidTestCompile "com.android.support.test.espresso:espresso-intents:$espressoVersion"
    androidTestCompile "com.android.support.test.espresso:espresso-idling-resource:$espressoVersion"
    // Android Testing Support Library's runner and rules
    androidTestCompile "com.android.support.test:runner:$testingSupportVersion"
    androidTestCompile "com.android.support.test:rules:$testingSupportVersion"
    androidTestCompile "com.squareup.assertj:assertj-android:$assertJAndroidVersion"
    androidTestCompile "com.squareup.spoon:spoon-client:$spoonVersion"

    // Dependencies for local unit tests
    testCompile "com.squareup.leakcanary:leakcanary-android-no-op:$leakCanaryVersion"
    testCompile "junit:junit:$junitVersion"
    testCompile "org.mockito:mockito-all:$mockitoVersion"
    testCompile "org.powermock:powermock-module-junit4:$powerMockitoVersion"
    testCompile "org.powermock:powermock-module-junit4-rule:$powerMockitoVersion"
    testCompile "org.powermock:powermock-api-mockito:$powerMockitoVersion"
    testCompile "org.powermock:powermock-classloading-xstream:$powerMockitoVersion"
    testCompile "org.robolectric:robolectric:$robolectricVersion"
    testCompile "org.robolectric:shadows-support-v4:$robolectricVersion"
    testCompile "org.assertj:assertj-core:$assertjVersion"
    testCompile "com.squareup.assertj:assertj-android:$assertJAndroidVersion"
    testCompile "com.google.dagger:dagger:$dagger2Version"
    testCompile "com.google.dagger:dagger-compiler:$dagger2Version"
}

/*
Resolves dependency versions across test and production APKs, specifically, transitive
dependencies. This is required since Espresso internally has a dependency on support-annotations.
*/
configurations.all {
    resolutionStrategy.force "com.android.support:support-annotations:$supportLibraryVersion"
}

/*All direct/transitive dependencies shared between your test and production APKs need to be
excluded from the test APK! This is necessary because both APKs will contain the same classes. Not
excluding these dependencies from your test configuration will result in an dex pre-verifier error
at runtime. More info in this tools bug: (https://code.google.com/p/android/issues/detail?id=192497)
*/
configurations.compile.dependencies.each { compileDependency ->
    println "Excluding compile dependency: ${compileDependency.getName()}"
    configurations.androidTestCompile.dependencies.each { androidTestCompileDependency ->
        configurations.androidTestCompile.exclude module: "${compileDependency.getName()}"
    }
}

def getGitSha() {
    return 'git rev-parse --short HEAD'.execute().text.trim()
}